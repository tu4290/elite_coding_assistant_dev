# Docker Compose configuration for Elite Coding Assistant Real-Time Features
# Includes the real-time server, Redis, and monitoring tools

version: '3.8'

services:
  # Redis service for real-time data storage and pub/sub
  redis:
    image: redis:7-alpine
    container_name: eca-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - eca-network
    environment:
      - REDIS_REPLICATION_MODE=master
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Real-time server
  realtime-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.realtime
    container_name: eca-realtime-server
    restart: unless-stopped
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis:6379/0
      - HOST=0.0.0.0
      - PORT=8001
      - LOG_LEVEL=INFO
      - WORKERS=1
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - eca-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: eca-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    depends_on:
      - redis
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
    networks:
      - eca-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: eca-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - realtime-server
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - eca-network
    profiles:
      - production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: eca-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - eca-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: eca-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - eca-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  eca-network:
    driver: bridge
    name: eca-network

volumes:
  redis_data:
    driver: local
    name: eca-redis-data
  prometheus_data:
    driver: local
    name: eca-prometheus-data
  grafana_data:
    driver: local
    name: eca-grafana-data